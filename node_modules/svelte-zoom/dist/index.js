(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Zoom = factory());
}(this, (function () { 'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    class Matrix {
      constructor(svg) {
        this.svg = svg || document.createElementNS("http://www.w3.org/2000/svg", "svg");

        this.vtm = this.createSVGMatrix();

        this.x = 0;
        this.y = 0;

        this.captureScale = 1;
      }

      clamp(scale, in_x, in_y, ratio) {
        let xx = (window.innerWidth - ratio.width) / 2;
        let yy = (window.innerHeight - ratio.height) / 2;

        let limit_max_right_formula = xx * scale + ratio.width * scale - window.innerWidth;

        let same_x = Math.min(this.vtm.e * 1.0, 0);
        let same_y = Math.min(this.vtm.f * 1.0, 0);

        let value1 = in_x > 0 ? same_x : -(xx * scale);
        let value2 = in_x > 0 ? same_x : -limit_max_right_formula;

        let limit_x_axis = this.vtm.e;
        limit_x_axis = Math.max(value2, this.vtm.e);
        limit_x_axis = Math.min(value1, limit_x_axis);

        let limit_max_bottom_formula = yy * scale + ratio.height * scale - window.innerHeight;
        let limit_max_top = in_y > 0 ? same_y : -(yy * scale);
        let limit_max_bottom = in_y > 0 ? same_y : -limit_max_bottom_formula;

        let limit_y_axis = this.vtm.f;
        limit_y_axis = Math.min(limit_max_top, limit_y_axis);
        limit_y_axis = Math.max(limit_y_axis, limit_max_bottom);

        this.vtm = this.createSVGMatrix().translate(limit_x_axis, limit_y_axis).scale(Math.max(this.vtm.a, 1));
      }

      createSVGMatrix() {
        return this.svg.createSVGMatrix()
      }

      move(x, y, in_x, in_y, ratio) {
        this.vtm = this.createSVGMatrix()
          .translate(this.x - x, this.y - y)
          .scale(this.vtm.a);

        this.clamp(this.vtm.a, in_x, in_y, ratio);
        return this.vtm
      }

      scale(xFactor, yFactor, origin, in_x, in_y, ratio, max, value, dir) {
        if ((value >= max || this.stop) && dir === 1) {
          this.stop = true;
          if (!this.deb) {
            this.captureScale = this.vtm.a;
            this.vtm = this.createSVGMatrix()
              .translate(origin.x, origin.y)
              .scale(max / this.captureScale)
              .translate(-origin.x, -origin.y)
              .translate(this.vtm.e, this.vtm.f)
              .scale(this.captureScale);

            this.deb = true;
          }
          return this.vtm
        } else {
          this.stop = false;
        }

        this.vtm = this.createSVGMatrix()
          .translate(origin.x, origin.y)
          .scale(xFactor, yFactor)
          .translate(-origin.x, -origin.y)
          .multiply(this.vtm);

        let pre_scale = Math.min(Math.max(1, this.vtm.a), max);

        this.clamp(pre_scale, in_x, in_y, ratio);

        return this.vtm
      }
    }

    class MultiTouchVelocity {
      constructor() {
        this.touchA = {
          clientX: 0,
          clientY: 0,
          t: 0,
          velocity: 1,
        };
        this.touchB = {
          clientX: 0,
          clientY: 0,
          t: 0,
          velocity: 1,
        };
      }
      down(touchA, touchB) {
        this.touchA = { clientX: touchA.clientX, clientY: touchA.clientY, t: Date.now(), velocity: 0 };
        this.touchB = { clientX: touchB.clientX, clientY: touchB.clientY, t: Date.now(), veloctiy: 0 };
      }
      calc(touch, ins) {
        var new_x = touch.clientX,
          new_y = touch.clientY,
          new_t = Date.now();

        var x_dist = new_x - ins.clientX,
          y_dist = new_y - ins.clientY,
          interval = new_t - ins.t;
        var velocity = Math.sqrt(x_dist * x_dist + y_dist * y_dist) / interval;
        ins.velocity = velocity;
        // update values:
        ins.clientX = new_x;
        ins.clientY = new_y;
        ins.t = new_t;
      }
      getVelocity(touchA, touchB) {
        this.calc(touchA, this.touchA);
        this.calc(touchB, this.touchB);
        return this.touchA.velocity + this.touchB.velocity
      }
    }

    function calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {
      var ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);

      return { width: srcWidth * ratio, height: srcHeight * ratio, ratio }
    }

    function getDistance(touchA, touchB) {
      return Math.hypot(touchA.pageX - touchB.pageX, touchA.pageY - touchB.pageY)
    }

    /* src/index.svelte generated by Svelte v3.24.1 */

    function add_css() {
    	var style = element("style");
    	style.id = "svelte-1sywrt4-style";
    	style.textContent = ".c-svelteZoom.svelte-1sywrt4{width:100%;height:100%;position:absolute;transform-origin:0 0;backface-visibility:hidden;-webkit-backface-visibility:hidden;-moz-backface-visibility:hidden;-o-backface-visibility:hidden;-ms-backface-visibility:hidden;-webkit-user-drag:none;-moz-user-drag:none;-o-user-drag:none;user-drag:none;touch-action:none}.c-svelteZoom--contain.svelte-1sywrt4{object-fit:contain}.c-svelteZoom--no-contain.svelte-1sywrt4{object-fit:contain}.c-svelteZoom--transition.svelte-1sywrt4{transition:transform 0.2s}.c-svelteZoom--visible.svelte-1sywrt4{visibility:visible}.c-svelteZoom--hidden.svelte-1sywrt4{visibility:hidden}.c-svelteZoom--willChange.svelte-1sywrt4{will-change:transform}";
    	append(document.head, style);
    }

    function create_fragment(ctx) {
    	let img_1;
    	let mounted;
    	let dispose;
    	let img_1_levels = [{ alt: /*alt*/ ctx[0] }, { class: "c-svelteZoom" }, /*$$props*/ ctx[8]];
    	let img_1_data = {};

    	for (let i = 0; i < img_1_levels.length; i += 1) {
    		img_1_data = assign(img_1_data, img_1_levels[i]);
    	}

    	return {
    		c() {
    			img_1 = element("img");
    			set_attributes(img_1, img_1_data);
    			toggle_class(img_1, "c-svelteZoom--contain", /*contain*/ ctx[3]);
    			toggle_class(img_1, "c-svelteZoom--no-contain", !/*contain*/ ctx[3]);
    			toggle_class(img_1, "c-svelteZoom--transition", /*smooth*/ ctx[1]);
    			toggle_class(img_1, "c-svelteZoom--visible", /*contain*/ ctx[3]);
    			toggle_class(img_1, "c-svelteZoom--hidden", /*contain*/ ctx[3] === null);
    			toggle_class(img_1, "c-svelteZoom--willChange", /*willChange*/ ctx[4]);
    			toggle_class(img_1, "svelte-1sywrt4", true);
    		},
    		m(target, anchor) {
    			insert(target, img_1, anchor);
    			/*img_1_binding*/ ctx[11](img_1);

    			if (!mounted) {
    				dispose = [
    					listen(img_1, "mousedown", /*mousedown*/ ctx[6]),
    					listen(img_1, "touchstart", /*touchstart*/ ctx[7]),
    					listen(img_1, "load", /*onLoad*/ ctx[5])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			set_attributes(img_1, img_1_data = get_spread_update(img_1_levels, [
    				dirty[0] & /*alt*/ 1 && { alt: /*alt*/ ctx[0] },
    				{ class: "c-svelteZoom" },
    				dirty[0] & /*$$props*/ 256 && /*$$props*/ ctx[8]
    			]));

    			toggle_class(img_1, "c-svelteZoom--contain", /*contain*/ ctx[3]);
    			toggle_class(img_1, "c-svelteZoom--no-contain", !/*contain*/ ctx[3]);
    			toggle_class(img_1, "c-svelteZoom--transition", /*smooth*/ ctx[1]);
    			toggle_class(img_1, "c-svelteZoom--visible", /*contain*/ ctx[3]);
    			toggle_class(img_1, "c-svelteZoom--hidden", /*contain*/ ctx[3] === null);
    			toggle_class(img_1, "c-svelteZoom--willChange", /*willChange*/ ctx[4]);
    			toggle_class(img_1, "svelte-1sywrt4", true);
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(img_1);
    			/*img_1_binding*/ ctx[11](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let { alt } = $$props;
    	let smooth = true;
    	let touchScreen = false;
    	let xY = { initX: 0, initY: 0, newX: 0, newY: 0 };
    	let ratio, img;
    	let matrix;
    	let contain = null;
    	let willChange = true;
    	let velocity = new MultiTouchVelocity();
    	let lastTap = { time: 0, x: 0, y: 0 };

    	let scale = {
    		scaling: false,
    		x1: 0,
    		x2: 0,
    		y1: 0,
    		y2: 0,
    		lastHypo: 0,
    		originX: 0,
    		originY: 0,
    		value: 1,
    		max: 1
    	};

    	function fireDown(x, y) {
    		xY.initX = x;
    		xY.initY = y;
    		matrix.x = matrix.vtm.e;
    		matrix.y = matrix.vtm.f;
    		$$invalidate(4, willChange = true);
    	}

    	function fireMove(x, y) {
    		if (scale.scaling) return;
    		let in_x = (window.innerWidth - ratio.width * matrix.vtm.a) / 2;
    		let in_y = (window.innerHeight - ratio.height * matrix.vtm.a) / 2;
    		xY.newX = xY.initX - x;
    		xY.newY = xY.initY - y;
    		const mat = matrix.move(in_x >= 0 ? 0 : xY.newX, in_y >= 0 ? 0 : xY.newY, in_x, in_y, ratio);
    		$$invalidate(2, img.style.transform = `matrix(${mat.a},${mat.b},${mat.c},${mat.d},${mat.e}, ${mat.f})`, img);
    	}

    	function fireUp() {
    		matrix.x -= xY.newX;
    		matrix.y -= xY.newY;
    		scale.scaling = false;
    		scale.lastHypo = 0;
    		$$invalidate(1, smooth = true);
    		$$invalidate(4, willChange = false);
    	}

    	function fireScale(touchA, touchB) {
    		const xTouch = [Math.min(touchA.pageX, touchB.pageX), Math.max(touchA.pageX, touchB.pageX)];
    		const yTouch = [Math.min(touchA.pageY, touchB.pageY), Math.max(touchA.pageY, touchB.pageY)];
    		const W = xTouch[1] - xTouch[0];
    		const centerX = W / 2 + xTouch[0];
    		const H = yTouch[1] - yTouch[0];
    		const centerY = H / 2 + yTouch[0];
    		scale.originX = centerX;
    		scale.originY = centerY;
    		scale.lastHypo = Math.trunc(getDistance(touchA, touchB));
    		$$invalidate(1, smooth = false);
    	}

    	function fireTapScale(x, y) {
    		let scaleVtm = matrix.vtm.a;
    		let scale_value = scaleVtm > 1 ? scaleVtm - 1 : scale.max / 2.5;
    		let scale_factor = scaleVtm > 1 ? -1 : 1;
    		const xFactor = 1 + scale_value * scale_factor;
    		const yFactor = xFactor * window.innerHeight / window.innerWidth;
    		let in_x = (window.innerWidth - ratio.width * Math.max(xFactor * scaleVtm, 1)) / 2;
    		let in_y = (window.innerHeight - ratio.height * Math.max(xFactor * scaleVtm, 1)) / 2;

    		const origin = {
    			x: in_x > 0 ? window.innerWidth / 2 : x,
    			y: in_y > 0 ? window.innerHeight / 2 : y
    		};

    		const mat = matrix.scale(xFactor, yFactor, origin, in_x, in_y, ratio, scale.max, scale.value * xFactor, scale_factor);
    		scale.value = mat.d;
    		$$invalidate(2, img.style.transform = `translate(${mat.e}px, ${mat.f}px) scale(${mat.d})`, img);
    	}

    	function fireScaleMove(touchA, touchB, e) {
    		const hypo = getDistance(touchA, touchB);
    		let f = hypo / scale.lastHypo;
    		f = f >= 1 ? 1 : -1;
    		const ff = velocity.getVelocity(touchA, touchB) || 1;
    		const xFactor = 1 + 0.1 * ff * f;
    		const yFactor = xFactor * window.innerHeight / window.innerWidth;
    		let in_x = (window.innerWidth - ratio.width * matrix.vtm.a) / 2;
    		let in_y = (window.innerHeight - ratio.height * matrix.vtm.a) / 2;

    		const origin = {
    			x: in_x > 0 ? window.innerWidth / 2 : scale.originX,
    			y: in_y > 0 ? window.innerHeight / 2 : scale.originY
    		};

    		const mat = matrix.scale(xFactor, yFactor, origin, in_x, in_y, ratio, scale.max, scale.value * xFactor, f);
    		$$invalidate(2, img.style.transform = `translate(${mat.e}px, ${mat.f}px) scale(${mat.d})`, img);
    		scale.value = mat.d;
    		scale.lastHypo = hypo;
    		scale.scaling = true;
    	}

    	function fireManualZoom(dir) {
    		const xFactor = 1 + 0.2 * dir;
    		const yFactor = xFactor * window.innerHeight / window.innerWidth;
    		let in_x = (window.innerWidth - ratio.width * matrix.vtm.a) / 2;
    		let in_y = (window.innerHeight - ratio.height * matrix.vtm.a) / 2;

    		const origin = {
    			x: window.innerWidth / 2,
    			y: window.innerHeight / 2
    		};

    		const mat = matrix.scale(xFactor, yFactor, origin, in_x, in_y, ratio, scale.max, scale.value * xFactor, dir);
    		$$invalidate(2, img.style.transform = `translate(${mat.e}px,${mat.f}px) scale(${mat.d})`, img);
    		scale.value = mat.d;
    	}

    	const zoomIn = () => fireManualZoom(1);
    	const zoomOut = () => fireManualZoom(-1);

    	function onResize() {
    		onLoad();
    		fireDown(0, 0);
    		fireMove(0, 0);
    		fireUp();
    	}

    	function onWheel(e) {
    		e.preventDefault();
    		const dir = e.deltaY < 0 ? 1 : -1;
    		const xFactor = 1 + 0.1 * dir;
    		const yFactor = xFactor * window.innerHeight / window.innerWidth;
    		let in_x = (window.innerWidth - ratio.width * matrix.vtm.a) / 2;
    		let in_y = (window.innerHeight - ratio.height * matrix.vtm.a) / 2;

    		const origin = {
    			x: in_x > 0 ? window.innerWidth / 2 : e.pageX,
    			y: in_y > 0 ? window.innerHeight / 2 : e.pageY
    		};

    		const mat = matrix.scale(xFactor, yFactor, origin, in_x, in_y, ratio, scale.max, scale.value * xFactor, dir);
    		$$invalidate(2, img.style.transform = `translate(${mat.e}px,${mat.f}px) scale(${mat.d})`, img);
    		scale.value = mat.d;
    	}

    	function onLoad() {
    		const { naturalWidth, naturalHeight } = img;
    		$$invalidate(3, contain = naturalWidth > window.innerWidth || naturalHeight > window.innerHeight);

    		scale.max = naturalWidth > naturalHeight
    		? Math.max(naturalWidth / window.innerWidth, 1)
    		: Math.max(naturalHeight / window.innerHeight, 1);

    		ratio = calculateAspectRatioFit(naturalWidth, naturalHeight, window.innerWidth, window.innerHeight);
    	}

    	onMount(() => {
    		matrix = new Matrix();
    		window.addEventListener("wheel", onWheel, { passive: false });
    		window.addEventListener("resize", onResize);

    		return () => {
    			window.removeEventListener("wheel", onWheel);
    			window.removeEventListener("resize", onResize);
    		};
    	});

    	function onTouchStart(e) {
    		touchScreen = true;
    		$$invalidate(4, willChange = true);
    		const isMultiTouch = e.touches.length === 2;
    		const [touchA, touchB] = e.touches;
    		scale.scaling = isMultiTouch;
    		$$invalidate(1, smooth = false);

    		if (isMultiTouch) {
    			fireScale(touchA, touchB);
    			velocity.down(touchA, touchB);
    		} else {
    			const { pageX, pageY } = touchA;
    			var now = new Date().getTime();

    			if (now - lastTap.time < 250 && Math.hypot(lastTap.x - pageX, lastTap.y - pageY) <= 20) {
    				$$invalidate(1, smooth = true);
    				fireTapScale(pageX, pageY);
    			} else {
    				fireDown(pageX, pageY);
    			}

    			lastTap = { time: now, x: pageX, y: pageY };
    		}

    		window.removeEventListener("touchmove", onTouchMove);
    		window.removeEventListener("touchend", onTouchEnd);
    		window.addEventListener("touchmove", onTouchMove);
    		window.addEventListener("touchend", onTouchEnd);
    	}

    	function onTouchMove(e) {
    		if (scale.scaling) {
    			const [touchA, touchB] = e.touches;
    			fireScaleMove(touchA, touchB);
    		} else {
    			fireMove(e.touches[0].pageX, e.touches[0].pageY);
    		}
    	}

    	function onTouchEnd(e) {
    		fireUp();
    		window.removeEventListener("touchmove", onTouchMove);
    		window.removeEventListener("touchend", onTouchEnd);
    		window.removeEventListener("touchcancel", onTouchEnd);
    	}

    	function onMouseDown({ clientX, clientY }) {
    		if (touchScreen) return;
    		fireDown(clientX, clientY);
    		$$invalidate(1, smooth = false);
    		window.addEventListener("mousemove", onMouseMove);
    		window.addEventListener("mouseup", onMouseUp);
    	}

    	function onMouseMove({ clientX, clientY }) {
    		fireMove(clientX, clientY);
    	}

    	function onMouseUp() {
    		window.removeEventListener("mousemove", onMouseMove);
    		fireUp();
    	}

    	const mousedown = onMouseDown;
    	const touchstart = onTouchStart;

    	function img_1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			img = $$value;
    			$$invalidate(2, img);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("alt" in $$new_props) $$invalidate(0, alt = $$new_props.alt);
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		alt,
    		smooth,
    		img,
    		contain,
    		willChange,
    		onLoad,
    		mousedown,
    		touchstart,
    		$$props,
    		zoomIn,
    		zoomOut,
    		img_1_binding
    	];
    }

    class Src extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-1sywrt4-style")) add_css();
    		init(this, options, instance, create_fragment, safe_not_equal, { alt: 0, zoomIn: 9, zoomOut: 10 }, [-1, -1]);
    	}

    	get zoomIn() {
    		return this.$$.ctx[9];
    	}

    	get zoomOut() {
    		return this.$$.ctx[10];
    	}
    }

    return Src;

})));
